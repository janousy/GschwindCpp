Advantage of Inheritance:

- less duplicated code (code reusing)
- changes can be made in one class and get inheritted by all subtypes
  hower this can also interdouce bugs, if change affects behaviour of subclasses

- extend containers more easily inherit code

- run time polymorphism
	 => usefull i types are not known at compile time, e.g reading from a file where we dont know what kind of obj it contains

- allow for custom containers that inherite from the standard containers 
	with templates not a good idea: 
		- polymorpish doesnt work correctly: vector<int> v1 = customVector<int>, = doesnt know about extra fields of custom => 
				dont get copyed
		- no virtual destructer (may not destruct all obj of custom, if the one of vector is called) 
		- no protected functions to inherit

Problems of inheritance:
We want to store what types are contained in a container but something like this is not possible:
	type my_type = int; // or string or any other type

This would be needed so we can try to cast for example a float to an int when adding it to the vectore.

We could solve this by combing inheritance with templates:
	template<typename Val> class Derived : public Base<Val>
	But this again has some problems since then our whole hierachie wouldnt work since the base would need for example 
	2 template parameter to work with maps but only one to work with vectores. 


Advantages of template based:

are due to the advatages of compile time polimophism:
- faster code (due to inlining)
- less space used, unuesed code doesn´t get compiled 
- "saver" since erros can be found at compile time



Pro: - code sharing - changes become easier - easy extension for custom 	containers - run-time polymorphism  Contra - 




