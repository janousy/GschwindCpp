Pro
- less duplicated code (code reusing)
- can be extended easily
- allows custom containers
- run-time polymorphism may be useful for unknown return types (e.g. computer player vs human player)

Contra
- templates more efficient (inline)
- unused code not compiled (but large executable)
- compile time polymorphism
- container size determined at compile time
- safer (errors at compile time)
- multiple container implementations for inheritance due to types


If you have the same algorithm, but with different types and sizes, use templates. If you have multiple types you want to handle through a common interface, use inheritance.

	--> better to use same algorithm for e.g. operator[ ] on different types with template based implementation